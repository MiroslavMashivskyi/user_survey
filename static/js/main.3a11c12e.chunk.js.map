{"version":3,"sources":["selectors/questions.js","BLL/reducers/reducer.js","components/Interrogation.jsx","components/Interrogation_Container.js","components/Your_Result.jsx","components/Your_Result_Container.js","App.js","serviceWorker.js","BLL/store.js","index.js"],"names":["questionsArray","api","array","key","push","initial","questions","API","count","text","answers","correct_answers","totalCount","length","result","questionReducer","state","action","type","question","answer","Interrogation","setAnswer","nextQuestion","useState","selected","setSelected","to","className","onSubmit","event","preventDefault","target","reset","submit","map","item","index","value","id","name","onChange","htmlFor","InterrogationContainer","connect","dispatch","Your_Result","filter","Your_Result_Container","App","exact","path","render","Interrogation_Container","Boolean","window","location","hostname","match","reducers","combineReducers","Reducer","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kkEAAaA,EAAiB,SAACC,GAC3B,IAAMC,EAAQ,GACd,IAAI,IAAIC,KAAOF,EACXC,EAAME,KAAKH,EAAIE,IAGnB,OAAOD,GCKLG,EAAU,CACZC,UAAWN,EAAeO,GAC1BC,MAAO,EACPC,KAAM,qVACNC,QAAS,CAAC,SAAU,QAAS,cAAe,MAC5CC,gBAAiB,CAAC,MAClBC,WAAYZ,EAAeO,GAAKM,OAChCC,OAAQ,IA6BGC,EA1BS,WAA8B,IAA7BC,EAA4B,uDAApBX,EAASY,EAAW,uCAE7C,OAAQA,EAAOC,MACf,IAhBc,gBAiBV,OAAO,2BACAF,GADP,IAEIR,MAAOQ,EAAMR,MAAQ,EACrBC,KAAMQ,EAAOE,SACbT,QAASO,EAAOP,QAChBC,gBAAiBM,EAAON,kBAGhC,IAxBW,aAyBP,OAAO,2BACAK,GADP,IAEIF,OAAO,GAAD,mBAAME,EAAMF,QAAZ,CAAoBG,EAAOG,WAGzC,QACI,OAAOJ,I,eC0BJK,EA7DO,SAAC,GAId,IAHPC,EAGM,EAHNA,UAAWC,EAGL,EAHKA,aACXZ,EAEM,EAFNA,gBAAiBL,EAEX,EAFWA,UAAWa,EAEtB,EAFsBA,SAC5BX,EACM,EADNA,MAAOE,EACD,EADCA,QAASE,EACV,EADUA,WACV,EAEyBY,qBAFzB,mBAEAC,EAFA,KAEUC,EAFV,KAIN,GAAGlB,EAAQF,EAAUO,OACjB,OAAO,kBAAC,IAAD,CAAUc,GAAI,YAezB,OACI,yBAAKC,UAAU,aACX,yOAGA,0BAAMC,SAAU,SAACC,IAjBV,SAACA,GACdA,EAAMC,iBACNT,EAAUG,IAAad,EAAgB,IACpCH,EAAQF,EAAUO,OACjBU,EAAajB,EAAUE,GAAOW,SAAUb,EAAUE,GAAOE,QAASJ,EAAUE,GAAOG,iBAEnFY,EAAa,KAAM,KAAM,MAE7BG,EAAY,KACZI,EAAME,OAAOC,QASLC,CAAOJ,IAEDF,UAAU,QACd,6FACgBpB,GAEhB,yBAAKoB,UAAU,YACVT,GAEL,yBAAKS,UAAU,SACVlB,EAAQyB,KAAI,SAACC,EAAMC,GACZ,OAAQ,yBAAKlC,IAAKkC,GACN,2BAAOC,MAAOF,EAAMlB,KAAK,QAAQqB,GAAIF,EAAOG,KAAK,SAASC,SAAU,SAACX,GAAD,OAAWJ,EAAYI,EAAME,OAAOM,UACxG,2BAAOI,QAASL,GAAQD,QAKhD,yBAAKR,UAAU,UACX,0BAAMA,UAAU,SACXpB,EADL,IACaI,GAEb,4BAAQgB,UAAU,UAAlB,oEC3BHe,EAFgBC,aAxBP,SAAC5B,GACrB,MAAO,CACHV,UAAWU,EAAMG,SAASb,UAC1Ba,SAAUH,EAAMG,SAASV,KACzBD,MAAOQ,EAAMG,SAASX,MACtBE,QAASM,EAAMG,SAAST,QACxBE,WAAYI,EAAMG,SAASP,WAC3BD,gBAAiBK,EAAMG,SAASR,gBAChCG,OAAQE,EAAMG,SAASL,WAIJ,SAAC+B,GACxB,MAAO,CACHtB,aAAc,SAACJ,EAAUT,EAASC,GAC9BkC,EFyBgB,SAAC1B,EAAUT,EAASC,GAApB,MAAyC,CAACO,KApChD,gBAoCqEC,WAAUT,UAASC,mBEzBzFY,CAAaJ,EAAUT,EAASC,KAG7CW,UAAW,SAACF,GACRyB,EFsBa,SAACzB,GAAD,MAAa,CAACF,KApCpB,aAoCuCE,UEtBrCE,CAAUF,QAKAwB,CAA6CvB,G,QCf7DyB,EAXK,SAAC,GAAgB,IAAdhC,EAAa,EAAbA,OAErB,OACE,yBAAKc,UAAU,UACb,0BAAOA,UAAU,gBAAjB,6BACSd,EAAOiC,QAAO,SAAAX,GAAI,OAAa,IAATA,KAAevB,OAD9C,yICMSmC,EAFeJ,aAPN,SAAC5B,GAErB,MAAO,CACHF,OAAQE,EAAMG,SAASL,UAID8B,CAAyBE,G,MCKxCG,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,eAAeC,OAAQ,kBAAM,kBAACC,EAAD,SAC/C,kBAAC,IAAD,CAAOF,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,WCEtBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCfFC,EAAWC,YAAgB,CAC3BzC,SAAU0C,IAKCC,EAFHC,YAAYJ,GCCxBK,IAASZ,OACL,kBAAC,IAAD,CAAUU,MAAOA,GACf,kBAAC,EAAD,OAEJG,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a11c12e.chunk.js","sourcesContent":["export const questionsArray = (api) => {\n    const array = [];\n    for(let key in api){\n        array.push(api[key])\n    }\n\n    return array;\n}\n","import  API from '../../API/questions.json';\nimport { questionsArray } from '../../selectors/questions';\n\n// fetch('https://github.com/MMashivskij/demo/blob/master/db.json')\n// .then(response => response.json())\n// .then(json => console.log(json)\n// )\n\nconst NEXT_QUESTION = \"NEXT_QUESTION\";\nconst SET_ANSWER = \"SET_ANSWER\";\n\nconst initial = {\n    questions: questionsArray(API),\n    count: 1,\n    text: \"Як називається найбільш популярна снайперська гвинтівка у грі CS:GO?\",\n    answers: [\"Fnatic\", \"Na`Vi\", \"Team Secret\", \"OG\"],\n    correct_answers: [\"OG\"],\n    totalCount: questionsArray(API).length,\n    result: [],\n}\n\nconst questionReducer = (state = initial, action) => {\n    \n        switch (action.type) {\n        case NEXT_QUESTION:\n            return {\n                ...state,\n                count: state.count + 1,\n                text: action.question,\n                answers: action.answers,\n                correct_answers: action.correct_answers\n            }\n\n        case SET_ANSWER:\n            return {\n                ...state,\n                result: [...state.result, action.answer]\n            }\n    \n        default:\n            return state;\n    }\n}\n\nexport const nextQuestion = (question, answers, correct_answers) => ({type: NEXT_QUESTION, question, answers, correct_answers});\nexport const setAnswer = (answer) => ({type: SET_ANSWER,  answer});\n\nexport default questionReducer;","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { submit } from 'redux-form';\n    \n\nconst Interrogation = ({ \n  setAnswer, nextQuestion, \n  correct_answers, questions, question, \n  count, answers, totalCount\n  }) => {\n\n  const[selected, setSelected] = useState();\n      \n  if(count > questions.length) {\n      return <Redirect to={\"/result\"} />\n  }\n\n  const submit = (event) => {\n    event.preventDefault();\n    setAnswer(selected === correct_answers[0]);\n    if(count < questions.length) {\n        nextQuestion(questions[count].question, questions[count].answers, questions[count].correct_answers)\n    } else {\n        nextQuestion(null, null, null)\n    }\n    setSelected(\" \");\n    event.target.reset();\n  }\n\n  return (\n      <div className='container'>\n          <h1>\n              Наскільки ти кіберспортивний експерт\n          </h1>\n          <form onSubmit={(event) => {\n            submit(event);\n          }}\n                  className='form'>\n              <div>\n                  Запитання №{count}\n              </div>\n              <div className='question'>\n                  {question}\n              </div>\n              <div className='radio'>\n                  {answers.map((item, index) => {\n                          return (<div key={index}>\n                                      <input value={item} type='radio' id={index} name=\"answer\" onChange={(event) => setSelected(event.target.value)}/>\n                                      <label htmlFor={index}>{item}</label>\n                                  </div>)\n                          })  \n                  }\n              </div>\n              <div className='footer'>\n                  <span className='count'>\n                      {count}/{totalCount}\n                  </span>\n                  <button className='button'>\n                      Продовжити\n                  </button>\n              </div>\n          </form>\n      </div>\n  );\n}\n\nexport default Interrogation;","import { connect } from 'react-redux';\nimport { nextQuestion, setAnswer } from '../BLL/reducers/reducer';\nimport Interrogation from './Interrogation';\n\nconst mapStateToProps = (state) => {\n    return {\n        questions: state.question.questions,\n        question: state.question.text,\n        count: state.question.count,\n        answers: state.question.answers,\n        totalCount: state.question.totalCount,\n        correct_answers: state.question.correct_answers,\n        result: state.question.result,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        nextQuestion: (question, answers, correct_answers) => {\n            dispatch(nextQuestion(question, answers, correct_answers))\n        },\n\n        setAnswer: (answer) => {\n            dispatch(setAnswer(answer))\n        },\n    }\n}\n\nconst InterrogationContainer = connect(mapStateToProps, mapDispatchToProps)(Interrogation);\n\nexport default InterrogationContainer;","import React from 'react';\n\nconst Your_Result = ({ result }) => {\n   \n  return (\n    <div className='result'>\n      <span  className='result__text'>\n        У Вас {result.filter(item => item === true).length} правильних відповідей з 5 \n      </span>\n    </div>\n  );\n}\n\nexport default Your_Result;","import { connect } from 'react-redux';\nimport Your_Result from './Your_Result';\n\nconst mapStateToProps = (state) => {\n    \n    return {\n        result: state.question.result\n    }\n}\n\nconst Your_Result_Container = connect(mapStateToProps)(Your_Result);\n\nexport default Your_Result_Container;","import React from 'react';\nimport Interrogation_Container from './components/Interrogation_Container';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Your_Result_Container from './components/Your_Result_Container';\nimport './styles/styles.scss';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route exact path=\"/user_survey\" render={() => <Interrogation_Container />} />\n      <Route path=\"/result\" render={() => <Your_Result_Container />} />\n    </ BrowserRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport Reducer from './reducers/reducer';\n\nlet reducers = combineReducers({\n    question: Reducer,\n});\n\nlet store = createStore(reducers);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './BLL/store';\n\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}